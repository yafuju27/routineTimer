//titleTextField„ÅÆ„Éê„Ç∞
//„Ç≠„Éº„Éú„Éº„ÉâÈñâ„Åò(return„Ç≠„Éº)
//„Çø„Çπ„ÇØ„ÅÆÂêàË®àÊôÇÈñìÂèçÊò†
//„Çª„É´‰∏¶„Å≥Êõø„Åà&ÂâäÈô§
//„Çª„É´„ÅÆ„Çø„Ç§„Éà„É´Â§âÊõ¥
//„Çª„É´„ÅÆÊôÇÈñìÂ§âÊõ¥
//„Çª„É´„ÅÆbackgroundcolorÈÅ∏Êäû

import UIKit
import RealmSwift

class SecondViewController: UIViewController {
    @IBOutlet weak var taskCollectionView: UICollectionView!
    @IBOutlet weak var startButton: UIButton!
    @IBOutlet weak var saveButton: UIButton!
    @IBOutlet weak var titleTextField: UITextField!
    
    private var viewWidth: CGFloat!
    private var viewHeight: CGFloat!
    private var cellWidth: CGFloat!
    private var cellHeight: CGFloat!
    private var cellOffset: CGFloat!
    private var navHeight: CGFloat!
    
    var taskArray = ["„Éà„Ç§„É¨"]
    var taskTimeArray = ["5ÂàÜ30Áßí"]
    var selectedImage: UIImage!
    let realm = try! Realm()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
    
    @IBAction func startButton(_ sender: Any) {
        //„Éú„Çø„É≥„ÅÆÊåØÂãï
        Feedbacker.impact(style: .medium)
    }
    
    @IBAction func saveButton(_ sender: Any) {
        //„Éú„Çø„É≥„ÇíÊäº„Åó„Åü„Çâ„ÄÅÂÖà„Åª„Å©Áî®ÊÑè„Åó„Åü„Éá„Éº„Çø„ÅÆÁÆ±„Å´„ÄÅ„ÉÜ„Ç≠„Çπ„Éà„Éï„Ç£„Éº„É´„Éâ„Å´ÂÖ•Âäõ„Åï„Çå„ÅüÂÄ§„ÇíÊõ∏„ÅçËæº„ÇÄÂá¶ÁêÜ„ÇíËøΩË®ò„ÄÇ
        let routine = Routine()
        routine.title = titleTextField.text!
        try! realm.write {
            realm.add(routine)
        }
        //ViewController„Å∏Êàª„ÇãÂá¶ÁêÜ
        self.navigationController?.popViewController(animated: true)
        //„Éú„Çø„É≥„ÅÆÊåØÂãï
        Feedbacker.impact(style: .medium)
    }
    
    @IBAction func addTaskButtonAction(_ sender: Any) {
        taskArray.append("Ê≠ØÁ£®„Åç")
        taskTimeArray.append("1ÂàÜ30Áßí")
        taskCollectionView.reloadData()
    }
    
    @IBAction func bellButtonAction(_ sender: Any) {
        //„Éú„Çø„É≥„ÅÆÊåØÂãï
        Feedbacker.impact(style: .medium)
    }
    
    //„Ç≠„Éº„Éú„Éº„ÉâÈñâ„Åò„ÇãÂá¶ÁêÜ
    @objc func dismissKeyboard() {
        self.view.endEditing(true)
    }
    
    private func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        self.titleTextField.resignFirstResponder()
        return true
    }
    
    private func setupView() {
        startButton.layer.cornerRadius = 12
        startButton.layer.shadowOpacity = 0.2
        startButton.layer.shadowRadius = 12
        startButton.layer.shadowColor = UIColor.black.cgColor
        startButton.layer.shadowOffset = CGSize(width: 1, height: 1)
        startButton.backgroundColor = UIColor.rgb(r: 234, g: 84, b: 85)
        
        saveButton.layer.cornerRadius = 12
        saveButton.backgroundColor = .color3
        
        //„ÉÜ„Ç≠„Çπ„Éà„Éï„Ç£„Éº„É´„Éâ„ÅÆ„Ç´„Çπ„Çø„Éû„Ç§„Ç∫
        titleTextField.setCustomeLine()
        
        viewWidth = view.frame.width
        viewHeight = view.frame.height
        navHeight = self.navigationController?.navigationBar.frame.size.height
        
        taskCollectionView.delegate = self
        taskCollectionView.dataSource = self
        taskCollectionView.dropDelegate = self
        taskCollectionView.dragDelegate = self
        
        // ÁîªÂÉè„ÅÆ„Ç¢„Çπ„Éö„ÇØ„ÉàÊØî„ÇíÁ∂≠ÊåÅ„ÅóUIImageView„Çµ„Ç§„Ç∫„Å´Âèé„Åæ„Çã„Çà„ÅÜ„Å´Ë°®Á§∫
        let nib = UINib(nibName: "TaskCollectionViewCell", bundle: .main)
        taskCollectionView.register(nib, forCellWithReuseIdentifier: "taskCell")
        
        self.navigationController!.navigationBar.setBackgroundImage(UIImage(), for: .default)
        self.navigationController!.navigationBar.shadowImage = UIImage()
        //self.navigationController?.navigationBar.tintColor = .white
        self.navigationController?.navigationBar.titleTextAttributes = [
            .foregroundColor: UIColor.white
        ]
        
        //ÁîªÈù¢„Åå„Çø„ÉÉ„Éó„Åï„Çå„Åü„Çâ„Ç≠„Éº„Éú„Éº„ÉâÈñâ„Åò„Çã„Åü„ÇÅ„ÅÆÂá¶ÁêÜÊ∫ñÂÇô
        let tapGR: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard))
        tapGR.cancelsTouchesInView = false
        self.view.addGestureRecognizer(tapGR)
        
        let routineItems = realm.objects(Routine.self)
        print("üü•ÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø\(routineItems)")
    }
    
}

extension SecondViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    
    //„Çª„É´„ÅÆÂÄãÊï∞
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return taskArray.count
    }
    //„Çª„É´„ÅÆ‰∏≠Ë∫´
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let taskCell = collectionView.dequeueReusableCell(withReuseIdentifier: "taskCell", for: indexPath) as! TaskCollectionViewCell
        taskCell.layer.cornerRadius = 24
        taskCell.backgroundColor = UIColor.white
        taskCell.layer.masksToBounds = false
        taskCell.taskName.text = "\(taskArray[indexPath.row])"
        taskCell.taskTime.text = "\(taskTimeArray[indexPath.row])"
        return taskCell
    }
    //„Çª„É´ÂêåÂ£´„ÅÆÈñìÈöî
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 7
    }
    //„Çª„É´„ÅÆ„Çµ„Ç§„Ç∫
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        cellWidth = viewWidth - 30
        cellHeight = 45
        cellOffset = viewWidth - cellWidth
        return CGSize(width: cellWidth, height: cellHeight)
    }
    // Cell „ÅåÈÅ∏Êäû„Åï„Çå„ÅüÂ†¥Âêà
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let storyboard = UIStoryboard(name: "TaskDetail", bundle: nil)
        let taskDetailVC = storyboard.instantiateViewController(withIdentifier: "TaskDetail") as! TaskDetailViewController
        taskDetailVC.taskTitle = taskArray[indexPath.row]
        self.present(taskDetailVC, animated: true)
    }
}

extension SecondViewController: UICollectionViewDragDelegate, UICollectionViewDropDelegate {
    
    //„Çª„É´„ÅÆ„Éâ„É©„ÉÉ„Ç∞
    func collectionView(_ collectionView: UICollectionView, itemsForBeginning session: UIDragSession, at indexPath: IndexPath) -> [UIDragItem] {
        let itemIdentifier = indexPath.item.description
        let itemProvider = NSItemProvider(object: itemIdentifier as NSItemProviderWriting)
        let dragItem = UIDragItem(itemProvider: itemProvider)
        return [dragItem]
    }
    
    //Ë¨é
    func collectionView(_ collectionView: UICollectionView, dropSessionDidUpdate session: UIDropSession, withDestinationIndexPath destinationIndexPath: IndexPath?) -> UICollectionViewDropProposal {
        return UICollectionViewDropProposal(operation: .move, intent: .insertAtDestinationIndexPath)
    }
    //„Çª„É´„ÅÆ„Éâ„É≠„ÉÉ„Éó
    func collectionView(_ collectionView: UICollectionView, performDropWith coordinator: UICollectionViewDropCoordinator) {
        if coordinator.proposal.operation == .move {
            guard let item = coordinator.items.first,
                  let destinationIndexPath = coordinator.destinationIndexPath,
                  let sourceIndexPath = item.sourceIndexPath else {
                return
            }
            
            collectionView.performBatchUpdates({
                // „Éá„Éº„Çø„ÇΩ„Éº„Çπ„ÅÆÊõ¥Êñ∞
                // let n = dataList.remove(at: sourceIndexPath.item)
                // dataList.insert(n, at: destinationIndexPath.item)
                //„Çª„É´„ÅÆÁßªÂãï
                collectionView.deleteItems(at: [sourceIndexPath])
                collectionView.insertItems(at: [destinationIndexPath])
            })
            coordinator.drop(item.dragItem, toItemAt: destinationIndexPath)
        }
    }
}
